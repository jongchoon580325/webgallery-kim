// FireworksEffect.js
import React, { useState, useEffect, useRef } from 'react';

const FireworksEffect = ({ 
  children, 
  particleCount = 30,
  particleColors = ['#ff0000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff00ff'],
  duration = 1000,
  particleSize = 5,
  spread = 60,
  triggerOnHover = true,
  triggerOnClick = false,
  disabled = false,
  className = '',
  style = {}
}) => {
  const [particles, setParticles] = useState([]);
  const [isActive, setIsActive] = useState(false);
  const containerRef = useRef(null);
  const timeoutRef = useRef(null);

  // 파티클 생성 함수
  const createParticles = (x, y) => {
    const newParticles = [];
    
    for (let i = 0; i < particleCount; i++) {
      // 랜덤 각도와 속도
      const angle = Math.random() * Math.PI * 2;
      const velocity = 2 + Math.random() * 2;
      
      // 랜덤 색상
      const color = particleColors[Math.floor(Math.random() * particleColors.length)];
      
      newParticles.push({
        id: `particle-${Date.now()}-${i}`,
        x,
        y,
        vx: Math.cos(angle) * velocity * (0.5 + Math.random()),
        vy: Math.sin(angle) * velocity * (0.5 + Math.random()),
        size: particleSize * (0.5 + Math.random()),
        color,
        life: 1.0, // 수명 (1.0에서 0으로 감소)
      });
    }
    
    setParticles(newParticles);
    setIsActive(true);
    
    // 일정 시간 후 파티클 제거
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      setParticles([]);
      setIsActive(false);
    }, duration);
  };

  // 파티클 애니메이션 업데이트
  useEffect(() => {
    if (!isActive || particles.length === 0) return;
    
    let animationFrameId;
    const startTime = Date.now();
    
    const updateParticles = () => {
      const currentTime = Date.now();
      const elapsed = currentTime - startTime;
      
      if (elapsed >= duration) {
        setParticles([]);
        setIsActive(false);
        return;
      }
      
      setParticles(prevParticles => 
        prevParticles.map(p => ({
          ...p,
          x: p.x + p.vx,
          y: p.y + p.vy,
          vy: p.vy + 0.05, // 중력 효과
          life: p.life - (1 / (duration / 16)), // 프레임당 수명 감소
        })).filter(p => p.life > 0)
      );
      
      animationFrameId = requestAnimationFrame(updateParticles);
    };
    
    animationFrameId = requestAnimationFrame(updateParticles);
    
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, [isActive, particles, duration]);

  // 컴포넌트 언마운트 시 타이머 정리
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  
  // 마우스 이벤트 핸들러
  const handleMouseOver = (e) => {
    if (disabled || !triggerOnHover) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    createParticles(x, y);
  };
  
  const handleClick = (e) => {
    if (disabled || !triggerOnClick) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    createParticles(x, y);
  };

  // 불꽃놀이 효과를 직접 트리거하는 함수 (외부에서 호출 가능)
  const triggerFireworks = (x, y) => {
    if (disabled || !containerRef.current) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    createParticles(
      x !== undefined ? x : rect.width / 2,
      y !== undefined ? y : rect.height / 2
    );
  };

  return (
    <div
      ref={containerRef}
      className={`fireworks-container ${className}`}
      style={{ 
        position: 'relative',
        overflow: 'hidden',
        ...style
      }}
      onMouseOver={handleMouseOver}
      onClick={handleClick}
    >
      {children}
      
      {/* 파티클 렌더링 */}
      {particles.map((particle) => (
        <div
          key={particle.id}
          style={{
            position: 'absolute',
            left: particle.x,
            top: particle.y,
            width: particle.size,
            height: particle.size,
            borderRadius: '50%',
            backgroundColor: particle.color,
            opacity: particle.life,
            pointerEvents: 'none',
            transform: `scale(${particle.life})`,
            transition: 'transform 0.1s linear',
          }}
        />
      ))}
    </div>
  );
};

// 컴포넌트에 triggerFireworks 메서드 추가를 위한 React.forwardRef 사용
const ForwardedFireworksEffect = React.forwardRef((props, ref) => {
  const innerRef = useRef(null);

  // ref를 통해 외부에서 트리거 메서드 노출
  useEffect(() => {
    if (!ref) return;
    
    // 함수형 ref일 경우
    if (typeof ref === 'function') {
      ref({
        triggerFireworks: (x, y) => innerRef.current?.triggerFireworks(x, y)
      });
    } 
    // 객체형 ref일 경우
    else if (ref.hasOwnProperty('current')) {
      ref.current = {
        triggerFireworks: (x, y) => innerRef.current?.triggerFireworks(x, y)
      };
    }
  }, [ref]);

  return <FireworksEffect {...props} ref={innerRef} />;
});

export default ForwardedFireworksEffect;
