// ImageGallery.js (개선된 버전)
import React, { useState, useEffect } from 'react';
import './ImageGallery.css';

const ImageGallery = ({ images: propImages = null }) => {
  // 실제 사용 시에는 props로 이미지 데이터를 받거나 API 호출을 통해 가져올 수 있습니다
  const [images, setImages] = useState([]);
  
  // 선택된 이미지 ID 목록
  const [selectedImages, setSelectedImages] = useState([]);
  
  // 모달 상태
  const [isModalOpen, setIsModalOpen] = useState(false);

  // 이미지 데이터 초기화
  useEffect(() => {
    if (propImages) {
      // props로 이미지를 받은 경우
      setImages(propImages.map(img => ({ ...img, selected: false })));
    } else {
      // 예시 이미지 데이터 생성
      const dummyImages = Array.from({ length: 25 }, (_, index) => ({
        id: index + 1,
        // 다양한 이미지를 위한 샘플 - 실제 앱에서는 실제 이미지 URL 사용
        src: `/api/placeholder/${300 + (index % 3) * 20}/${300 + (index % 5) * 20}`,
        alt: `Image ${index + 1}`,
        title: `이미지 제목 ${index + 1}`,
        selected: false
      }));
      setImages(dummyImages);
    }
  }, [propImages]);
  
  // 체크박스 클릭 핸들러
  const handleCheckboxChange = (id) => {
    setImages(images.map(image => 
      image.id === id ? { ...image, selected: !image.selected } : image
    ));
    
    setSelectedImages(prev => {
      if (prev.includes(id)) {
        return prev.filter(imageId => imageId !== id);
      } else {
        return [...prev, id];
      }
    });
  };
  
  // 선택된 이미지 삭제 핸들러
  const handleDelete = () => {
    setImages(images.filter(image => !selectedImages.includes(image.id)));
    setSelectedImages([]);
    setIsModalOpen(false);
  };
  
  // 삭제 확인 모달 열기
  const openDeleteModal = () => {
    if (selectedImages.length > 0) {
      setIsModalOpen(true);
    }
  };
  
  // 모달 닫기
  const closeModal = () => {
    setIsModalOpen(false);
  };
  
  // 모든 이미지 선택/해제
  const toggleSelectAll = () => {
    if (selectedImages.length === images.length) {
      // 모두 선택된 상태면 모두 해제
      setImages(images.map(image => ({ ...image, selected: false })));
      setSelectedImages([]);
    } else {
      // 일부만 선택됐거나 아무것도 선택되지 않았으면 모두 선택
      const allIds = images.map(image => image.id);
      setImages(images.map(image => ({ ...image, selected: true })));
      setSelectedImages(allIds);
    }
  };

  // 이미지 클릭 핸들러 (이미지 자체 클릭 시 체크박스 토글)
  const handleImageClick = (id, event) => {
    // 이미지 클릭 시 체크박스 영역을 클릭한 경우는 제외
    if (!event.target.classList.contains('image-checkbox')) {
      handleCheckboxChange(id);
    }
  };

  return (
    <div className="gallery-container">
      <div className="gallery-header">
        <h1>이미지 갤러리</h1>
        <div className="gallery-actions">
          {images.length > 0 && (
            <button 
              className="select-all-button"
              onClick={toggleSelectAll}
            >
              {selectedImages.length === images.length ? '전체 선택 해제' : '전체 선택'}
            </button>
          )}
          {selectedImages.length > 0 && (
            <button 
              className="delete-button" 
              onClick={openDeleteModal}
            >
              선택한 이미지 삭제 ({selectedImages.length})
            </button>
          )}
        </div>
      </div>
      
      <div className="gallery-grid">
        {images.map(image => (
          <div 
            key={image.id} 
            className={`image-container ${image.selected ? 'selected' : ''}`}
            onClick={(e) => handleImageClick(image.id, e)}
          >
            <div className="image-wrapper">
              <img src={image.src} alt={image.alt} title={image.title} />
              <div className="image-overlay">
                <input
                  type="checkbox"
                  className="image-checkbox"
                  checked={image.selected}
                  onChange={() => handleCheckboxChange(image.id)}
                  onClick={(e) => e.stopPropagation()} // 체크박스 클릭 이벤트 전파 방지
                />
              </div>
            </div>
            {image.title && (
              <div className="image-title">{image.title}</div>
            )}
          </div>
        ))}
      </div>
      
      {/* 갤러리가 비어있는 경우 */}
      {images.length === 0 && (
        <div className="empty-gallery">
          <p>이미지가 없습니다.</p>
        </div>
      )}
      
      {/* 삭제 확인 모달 */}
      {isModalOpen && (
        <div className="modal-backdrop" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h2>삭제 확인</h2>
            <p>선택한 {selectedImages.length}개의 이미지를 정말 삭제하시겠습니까?</p>
            <div className="modal-buttons">
              <button className="cancel-button" onClick={closeModal}>취소</button>
              <button className="delete-confirm-button" onClick={handleDelete}>삭제</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ImageGallery;
